import {
  customQueries,
  generateNewWallet,
  getFileFromPath,
  ixo,
  saveFileToPath,
  testMsg,
  utils,
} from "../../helpers/common";
import { WalletUsers } from "../../helpers/constants";
import * as Iid from "../../modules/Iid";
import * as Entity from "./Entity";
import * as Entity1 from "../Entity";
import {
  EcsCredentialsWorkerUrl,
  chainNetwork,
  dids,
} from "../../setup/constants";
import {
  uploadAllToCellnodeWeb3,
  uploadAllToCellnodeWeb3Claims,
} from "../helpers";
import {
  setup_asset_collection_constants,
  setup_protocol_legacy_cooking_constants,
} from "./extra-constants";
import axios from "axios";

export const cookstovesExtra = () =>
  describe("Testing the iid module", () => {
    beforeAll(() =>
      generateNewWallet(WalletUsers.tester, process.env.ROOT_ECS!)
    );

    testMsg("Add linkedEntity to Project", async () => {
      const resource = ixo.iid.v1beta1.LinkedEntity.fromPartial({
        id: dids.ecsDao,
        type: "dao",
        relationship: "implementation",
        service: "ixo",
      });
      return await Iid.AddLinkedEntity(dids.ecsProject, resource);
    });

    testMsg("Add linkedEntity to Collection", async () => {
      const resource = ixo.iid.v1beta1.LinkedEntity.fromPartial({
        id: dids.ecsProject,
        type: "project",
        relationship: "collection",
        service: "ixo",
      });
      return await Iid.AddLinkedEntity(dids.assetCollection, resource);
    });

    testMsg("Add Project Doc to Project", async () => {
      const resource = ixo.iid.v1beta1.LinkedResource.fromPartial({
        type: "ProjectCredential",
        id: "{id}#projectCredential",
        description: "Project Document",
        mediaType: "application/pdf",
        serviceEndpoint:
          "https://platform.sustain-cert.com/public-project/2710",
        proof: "",
        encrypted: "false",
        right: "",
      });
      return await Iid.AddLinkedResource(dids.ecsProject, resource);
    });

    testMsg("Remove Project Doc from Collection", async () => {
      return await Iid.DeleteLinkedResource(
        dids.assetCollection,
        "{id}#projectCredential"
      );
    });

    testMsg("Add Project as Collection Parent in Context", async () => {
      const context = ixo.iid.v1beta1.Context.fromPartial({
        key: "class",
        val: dids.ecsProject,
      });
      const res = await Iid.DeleteIidContext(dids.assetCollection, context.key);
      return await Iid.AddIidContext(dids.assetCollection, context);
    });
  });

export const emergingLegacyProtocolsFlow = () =>
  describe("Flow for creating Emerging Protocol (dao/protocol/oracle)", () => {
    beforeAll(() =>
      Promise.all([
        generateNewWallet(WalletUsers.tester, process.env.ROOT_EMERGING!),
        generateNewWallet(WalletUsers.alice, process.env.ROOT_ED_EMERGING!),
      ])
    );

    // =============================== START
    let protCleanCookingDid: string;
    testMsg("Create legacy cooking protocol", async () => {
      const daoConst = setup_protocol_legacy_cooking_constants();

      let protCleanCookingLinkedResourcesUploaded =
        await uploadAllToCellnodeWeb3(daoConst.linkedResources);
      console.log({ protCleanCookingLinkedResourcesUploaded });

      // Create the Entity
      const res = await Entity1.CreateEntity(
        daoConst.entity,
        protCleanCookingLinkedResourcesUploaded,
        true
      );
      protCleanCookingDid = utils.common.getValueFromEvents(
        res,
        "wasm",
        "token_id"
      );
      console.log({ protCleanCookingDid });

      return res;
    });
    // =============================== END
  });

export const legacyCollectionFlow = () =>
  describe("Flow for creating ECS entities (dao/protocol/oracle)", () => {
    beforeAll(() =>
      generateNewWallet(WalletUsers.tester, process.env.ROOT_ECS!)
    );

    // =============================== START
    let assetCollectionDid: string;
    testMsg("/ixo.entity.v1beta1.MsgCreateEntity dao", async () => {
      const collectionConst = setup_asset_collection_constants();

      let linkedResourcesUploaded = await uploadAllToCellnodeWeb3(
        collectionConst.linkedResources
      );
      console.log({ linkedResourcesUploaded });

      let linkedClaimsUploaded = await uploadAllToCellnodeWeb3Claims(
        collectionConst.linkedClaims
      );
      console.log({ linkedClaimsUploaded });

      // Create the Entity
      const res = await Entity.CreateSupamotoAssetCollection(
        collectionConst.entity,
        linkedResourcesUploaded,
        linkedClaimsUploaded
      );
      assetCollectionDid = utils.common.getValueFromEvents(
        res,
        "wasm",
        "token_id"
      );
      console.log({ assetCollectionDid });

      return res;
    });
    // =============================== END

    // Add the web dashboard linkedResource as need did
    testMsg("/ixo.iid.v1beta1.MsgAddLinkedResource", () =>
      Iid.AddLinkedResource(
        assetCollectionDid,
        ixo.iid.v1beta1.LinkedResource.fromPartial({
          id: "{id}#collectionDashboard",
          type: "WebDashboard",
          description: "Collection Dashboard",
          mediaType: "application/html",
          serviceEndpoint: "emerging:/collections/" + assetCollectionDid,
          proof: "",
          encrypted: "false",
          right: "#apitoken",
        })
      )
    );
  });

export const legacyCookstovesFlow = () =>
  describe("Testing the Supamoto nfts flow", () => {
    beforeAll(() =>
      generateNewWallet(WalletUsers.tester, process.env.ROOT_ECS!)
    );

    // Create a batch of Asset entities for the individual Supamoto assets
    let assetsFailed: any[] = [];
    let assetInstanceDids: { id: string; did: string }[] = [];
    let index = 970;

    legacyCookstoveIds.map((id, i) =>
      testMsg(
        `/ixo.entity.v1beta1.MsgCreateEntity asset instance`,
        async () => {
          console.log(
            `/ixo.entity.v1beta1.MsgCreateEntity asset instance index:${index} (array index: ${i}) for id:${id}`
          );
          try {
            const file = JSON.parse(
              getFileFromPath(
                ["documents", "test-supamoto-device-credential-legacy.jsonld"],
                "ascii"
              )
            );
            file["credential"]["credentialSubject"][
              "id"
            ] = `https://app.emerging.eco/devices/${id}`;

            // Create Credential, ecs must issue cert for each asset, so ecs creds worker
            const resCreds = await axios.post(
              EcsCredentialsWorkerUrl + "credentials/create",
              file,
              {
                headers: {
                  Authorization: process.env.ECS_CREDENTIAL_WORKER_AUTH,
                },
              }
            );
            if (![200, 201].includes(resCreds.status) || !resCreds.data)
              throw new Error("error creating device creds");

            // Upload credential to web3 storage
            const deviceCreds = (
              await customQueries.cellnode.uploadWeb3Doc(
                `Supamoto Asset Device Creds: ${chainNetwork} ${id}`,
                "application/ld+json",
                Buffer.from(JSON.stringify(resCreds.data)).toString("base64"),
                undefined,
                chainNetwork
              )
            ).cid;

            console.log({ deviceCreds });
            if (!deviceCreds) throw new Error("error saving device creds file");

            const res = await Entity.CreateEntityAssetSupamotoInstance(
              dids.legacyCollection,
              [{ deviceId: id, index, deviceCreds }],
              dids.emergingDao
            );
            const nftAssetDid = utils.common.getValueFromEvents(
              res,
              "wasm",
              "token_id"
            );
            console.log({ nftAssetDid });
            if (!nftAssetDid) throw new Error("error creating nft asset");

            index++;
            assetInstanceDids.push({ id: id, did: nftAssetDid });
            return "res" as any;
          } catch (error) {
            assetsFailed.push({ id });
            throw new Error(error);
          }
        }
      )
    );

    test("Logging all nft assets created", async () => {
      console.log(
        "Create file to save assetInstanceDids that was successfully and failed"
      );
      saveFileToPath(
        ["documents", "emerging", "unconnected_cookstoves_dids.json"],
        JSON.stringify({ assetInstanceDids, assetsFailed }, null, 2)
      );
      expect(true).toBeTruthy();
    });
  });

// list of Supamoto Unconnected Collection stoves 1047 long
export const legacyCookstoveIds = [
  "20220033",
  "31000332",
  "31002444",
  "31002987",
  "31003252",
  "31003470",
  "31008514",
  "31025390",
  "202200003",
  "202200006",
  "202200008",
  "202200019",
  "202200021",
  "202200022",
  "202200023",
  "202200024",
  "202200027",
  "202200036",
  "202200037",
  "202200038",
  "202200041",
  "202200049",
  "202200054",
  "202200055",
  "202200059",
  "202200061",
  "202200062",
  "202200070",
  "202200071",
  "202200073",
  "202200079",
  "202200086",
  "202200097",
  "202200105",
  "202200106",
  "202200107",
  "202200109",
  "202200112",
  "202200125",
  "202200132",
  "202200133",
  "202200134",
  "202200139",
  "202200152",
  "202200157",
  "202200162",
  "202200163",
  "202200165",
  "202200166",
  "202200167",
  "202200171",
  "202200175",
  "202200177",
  "202200179",
  "202200182",
  "202200184",
  "202200186",
  "202200187",
  "202200188",
  "202200190",
  "202200191",
  "202200192",
  "202200193",
  "202200197",
  "202200203",
  "202200206",
  "202200209",
  "202200213",
  "202200230",
  "202200234",
  "202200235",
  "202200236",
  "202200239",
  "202200242",
  "202200250",
  "202200251",
  "202200252",
  "202200254",
  "202200255",
  "202200258",
  "202200259",
  "202200261",
  "202200268",
  "202200269",
  "202200274",
  "202200287",
  "202200299",
  "202200302",
  "202200303",
  "202200310",
  "202200312",
  "202200325",
  "202200328",
  "202200330",
  "202200331",
  "202200332",
  "202200334",
  "202200335",
  "202200336",
  "202200337",
  "202200338",
  "202200343",
  "202200350",
  "202200355",
  "202200359",
  "202200363",
  "202200364",
  "202200369",
  "202200370",
  "202200371",
  "202200373",
  "202200376",
  "202200377",
  "202200390",
  "202200393",
  "202200395",
  "202200396",
  "202200397",
  "202200398",
  "202200626",
  "310000012",
  "310000046",
  "310000049",
  "310000071",
  "310000081",
  "310000141",
  "310000144",
  "310000160",
  "310000180",
  "310000197",
  "310000213",
  "310000217",
  "310000244",
  "310000289",
  "310000321",
  "310000357",
  "310000364",
  "310000388",
  "310000397",
  "310000413",
  "310000436",
  "310000484",
  "310000486",
  "310000487",
  "310000533",
  "310000541",
  "310000545",
  "310000548",
  "310000559",
  "310000567",
  "310000586",
  "310000603",
  "310000657",
  "310000663",
  "310000668",
  "310000709",
  "310000749",
  "310000795",
  "310000812",
  "310000884",
  "310000905",
  "310000907",
  "310000917",
  "310000934",
  "310000947",
  "310000981",
  "310000990",
  "310001014",
  "310001019",
  "310001049",
  "310001054",
  "310001063",
  "310001064",
  "310001112",
  "310001116",
  "310001128",
  "310001158",
  "310001189",
  "310001200",
  "310001220",
  "310001268",
  "310001273",
  "310001275",
  "310001311",
  "310001331",
  "310001335",
  "310001451",
  "310001465",
  "310001517",
  "310001521",
  "310001545",
  "310001553",
  "310001562",
  "310001573",
  "310001581",
  "310001618",
  "310001619",
  "310001652",
  "310001670",
  "310001676",
  "310001679",
  "310001697",
  "310001751",
  "310001767",
  "310001775",
  "310001784",
  "310001802",
  "310001816",
  "310001832",
  "310001833",
  "310001839",
  "310001845",
  "310001852",
  "310001910",
  "310001922",
  "310001944",
  "310001958",
  "310001967",
  "310001991",
  "310002015",
  "310002028",
  "310002046",
  "310002065",
  "310002076",
  "310002128",
  "310002153",
  "310002186",
  "310002189",
  "310002192",
  "310002201",
  "310002203",
  "310002206",
  "310002261",
  "310002262",
  "310002273",
  "310002276",
  "310002290",
  "310002308",
  "310002325",
  "310002346",
  "310002368",
  "310002395",
  "310002401",
  "310002404",
  "310002416",
  "310002456",
  "310002466",
  "310002496",
  "310002520",
  "310002538",
  "310002561",
  "310002611",
  "310002673",
  "310002697",
  "310002769",
  "310002783",
  "310002785",
  "310002786",
  "310002797",
  "310002816",
  "310002905",
  "310002948",
  "310002956",
  "310002967",
  "310003013",
  "310003042",
  "310003089",
  "310003141",
  "310003148",
  "310003154",
  "310003193",
  "310003202",
  "310003291",
  "310003327",
  "310003395",
  "310003429",
  "310003431",
  "310003436",
  "310003481",
  "310003494",
  "310003517",
  "310003529",
  "310003545",
  "310003577",
  "310003617",
  "310004548",
  "310004651",
  "310005000",
  "310005139",
  "310005394",
  "310005649",
  "310005712",
  "310005768",
  "310005982",
  "310006033",
  "310006080",
  "310006441",
  "310006660",
  "310006901",
  "310007121",
  "310007801",
  "310008344",
  "310008372",
  "310008790",
  "310008813",
  "310008844",
  "310008875",
  "310008886",
  "310008913",
  "310008914",
  "310009082",
  "310009389",
  "310009834",
  "310009967",
  "310010002",
  "310012736",
  "310012740",
  "310013135",
  "310013229",
  "310013388",
  "310013415",
  "310013906",
  "310013938",
  "310013942",
  "310013944",
  "310013958",
  "310014076",
  "310014179",
  "310014250",
  "310014255",
  "310014518",
  "310014538",
  "310014602",
  "310014833",
  "310014941",
  "310015120",
  "310015135",
  "310015266",
  "310015341",
  "310015457",
  "310015520",
  "310015529",
  "310015559",
  "310015799",
  "310015923",
  "310016243",
  "310016265",
  "310016327",
  "310016880",
  "310016884",
  "310017004",
  "310017006",
  "310017108",
  "310017200",
  "310017368",
  "310017452",
  "310017475",
  "310017519",
  "310017663",
  "310017717",
  "310017742",
  "310017744",
  "310017809",
  "310017950",
  "310018009",
  "310018024",
  "310018278",
  "310018344",
  "310018384",
  "310018459",
  "310018742",
  "310018976",
  "310019012",
  "310020637",
  "310020644",
  "310020673",
  "310020724",
  "310020730",
  "310020760",
  "310020782",
  "310020805",
  "310020815",
  "310020877",
  "310020883",
  "310020921",
  "310020955",
  "310020972",
  "310020991",
  "310021062",
  "310021071",
  "310021102",
  "310021177",
  "310021188",
  "310021266",
  "310021269",
  "310021330",
  "310021348",
  "310021354",
  "310021355",
  "310021422",
  "310021443",
  "310021451",
  "310021490",
  "310021572",
  "310021581",
  "310021585",
  "310021612",
  "310021772",
  "310021795",
  "310021798",
  "310021805",
  "310021806",
  "310021817",
  "310021886",
  "310021932",
  "310021952",
  "310022044",
  "310022082",
  "310022083",
  "310022088",
  "310022122",
  "310022130",
  "310022165",
  "310022188",
  "310022204",
  "310022247",
  "310022249",
  "310022256",
  "310022259",
  "310022272",
  "310022301",
  "310022304",
  "310022311",
  "310022327",
  "310022336",
  "310022373",
  "310022380",
  "310022431",
  "310022473",
  "310022482",
  "310022488",
  "310022490",
  "310022548",
  "310022684",
  "310022704",
  "310022721",
  "310022736",
  "310022741",
  "310022765",
  "310022771",
  "310022775",
  "310022780",
  "310022785",
  "310022816",
  "310022819",
  "310022871",
  "310022903",
  "310022910",
  "310022915",
  "310022943",
  "310022989",
  "310022991",
  "310023001",
  "310023109",
  "310023145",
  "310023188",
  "310023354",
  "310023434",
  "310023544",
  "310023568",
  "310023598",
  "310025103",
  "310025146",
  "310025149",
  "310025165",
  "310025185",
  "310025201",
  "310025231",
  "310025252",
  "310025255",
  "310025320",
  "310025380",
  "310025397",
  "310025423",
  "310025437",
  "310025439",
  "310025495",
  "310025525",
  "310025560",
  "310025569",
  "310025589",
  "310028110",
  "310028297",
  "310028305",
  "310028423",
  "310028458",
  "310028578",
  "310028684",
  "310028747",
  "310028772",
  "310028780",
  "310028924",
  "310028941",
  "310028969",
  "310029076",
  "310029083",
  "310029085",
  "310029210",
  "310029212",
  "310029231",
  "310029244",
  "310029253",
  "310029503",
  "310029584",
  "310029607",
  "310029624",
  "310029630",
  "310029641",
  "310029662",
  "310029735",
  "310029874",
  "310029895",
  "310029949",
  "310030107",
  "310030122",
  "310030188",
  "310030298",
  "310030301",
  "310030326",
  "310030334",
  "310030412",
  "310030596",
  "310030615",
  "310030684",
  "310030690",
  "310030723",
  "310030802",
  "310030851",
  "310031038",
  "310031138",
  "310031338",
  "310031651",
  "310031855",
  "310032102",
  "310032103",
  "310032240",
  "310032258",
  "310032271",
  "310032281",
  "310032314",
  "310032315",
  "310032335",
  "310032354",
  "310032360",
  "310032362",
  "310032368",
  "310032386",
  "310032406",
  "310032421",
  "310032441",
  "310032442",
  "310032447",
  "310032448",
  "310032496",
  "310032516",
  "310032518",
  "310032520",
  "310032528",
  "310032530",
  "310032535",
  "310032536",
  "310032538",
  "310032548",
  "310032549",
  "310032561",
  "310032563",
  "310032564",
  "310032565",
  "310032566",
  "310032580",
  "310032599",
  "310032600",
  "310032609",
  "310032610",
  "310032613",
  "310032624",
  "310032636",
  "310032637",
  "310032638",
  "310032657",
  "310032658",
  "310032661",
  "310032662",
  "310032667",
  "310032670",
  "310032680",
  "310032688",
  "310032699",
  "310032703",
  "310032719",
  "310032734",
  "310032735",
  "310032741",
  "310032746",
  "310032783",
  "310032816",
  "310032847",
  "310032854",
  "310032909",
  "310032946",
  "310032977",
  "310033026",
  "310033028",
  "310033071",
  "310033073",
  "310033075",
  "310033077",
  "310033080",
  "310033082",
  "310033087",
  "310033088",
  "310033094",
  "310033095",
  "310033105",
  "310033142",
  "310033149",
  "310033173",
  "310033182",
  "310033200",
  "310033201",
  "310033202",
  "310033205",
  "310033207",
  "310033216",
  "310033234",
  "310033243",
  "310033253",
  "310033256",
  "310033279",
  "310033298",
  "310033300",
  "310033305",
  "310033310",
  "310033330",
  "310033332",
  "310033344",
  "310033353",
  "310033358",
  "310033425",
  "310033431",
  "310033433",
  "310033442",
  "310033454",
  "310033457",
  "310033472",
  "310033473",
  "310033474",
  "310033476",
  "310033483",
  "310033507",
  "310033509",
  "310033531",
  "310033532",
  "310033549",
  "310033572",
  "310033582",
  "310033598",
  "310033599",
  "310033606",
  "310033608",
  "310033635",
  "310033664",
  "310033733",
  "310033769",
  "310033771",
  "310033779",
  "310033786",
  "310033787",
  "310033850",
  "310033854",
  "310033857",
  "310033882",
  "310033920",
  "310033958",
  "310033962",
  "310033968",
  "310033996",
  "310034004",
  "310034021",
  "310034023",
  "310034025",
  "310034026",
  "310034041",
  "310034053",
  "310034055",
  "310034069",
  "310034070",
  "310034083",
  "310034084",
  "310034097",
  "310034098",
  "310034112",
  "310034120",
  "310034159",
  "310034202",
  "310034203",
  "310034265",
  "310034273",
  "310034286",
  "310034305",
  "310034308",
  "310034356",
  "310034360",
  "310034366",
  "310034373",
  "310034384",
  "310034424",
  "310034425",
  "310034429",
  "310034456",
  "310034457",
  "310034460",
  "310034465",
  "310034476",
  "310034478",
  "310034479",
  "310034480",
  "310034486",
  "310034493",
  "310034500",
  "310034501",
  "310034502",
  "310034544",
  "310034558",
  "310034577",
  "310034591",
  "310034595",
  "310034596",
  "310034609",
  "310034613",
  "310034617",
  "310034621",
  "310034623",
  "310034626",
  "310034628",
  "310034631",
  "310034664",
  "310034665",
  "310034690",
  "310034694",
  "310034709",
  "310034728",
  "310034738",
  "310034747",
  "310034755",
  "310034765",
  "310034769",
  "310034777",
  "310034788",
  "310034789",
  "310034790",
  "310034791",
  "310034793",
  "310034794",
  "310034815",
  "310034817",
  "310034818",
  "310034829",
  "310034881",
  "310034885",
  "310034953",
  "310034961",
  "310034970",
  "310035008",
  "310035025",
  "310035032",
  "310035055",
  "310035057",
  "310035070",
  "310035075",
  "310035077",
  "310035082",
  "310035095",
  "310035098",
  "310035125",
  "310035134",
  "310035160",
  "310035197",
  "310035210",
  "310035238",
  "310035245",
  "310035255",
  "310035256",
  "310035258",
  "310035276",
  "310035278",
  "310035280",
  "310035296",
  "310035298",
  "310035299",
  "310035335",
  "310035346",
  "310035363",
  "310035472",
  "310035514",
  "310035650",
  "310035697",
  "310035726",
  "310035867",
  "310035913",
  "310035976",
  "310035980",
  "310036034",
  "310036046",
  "310036080",
  "310036167",
  "310036372",
  "310036493",
  "310036524",
  "310036528",
  "310036535",
  "310036608",
  "310036640",
  "310036718",
  "310036725",
  "310036883",
  "310036884",
  "310036902",
  "310036989",
  "310037017",
  "310037085",
  "310037149",
  "310037158",
  "310037179",
  "310037196",
  "310037346",
  "310037347",
  "310037589",
  "310037615",
  "310037667",
  "310037757",
  "310037777",
  "310037784",
  "310037829",
  "310037884",
  "310038013",
  "310038045",
  "310038064",
  "310038113",
  "310038116",
  "310038143",
  "310038212",
  "310038235",
  "310038324",
  "310038338",
  "310038353",
  "310038398",
  "310038500",
  "310050109",
  "310050169",
  "310050170",
  "310050195",
  "310050219",
  "310050237",
  "310050247",
  "310050274",
  "310050345",
  "310050477",
  "310050554",
  "310050588",
  "310050589",
  "310050592",
  "310050593",
  "310050597",
  "310050847",
  "310050852",
  "310050863",
  "310050881",
  "310050885",
  "310050938",
  "310050956",
  "310050964",
  "310050979",
  "310050983",
  "310050998",
  "310051011",
  "310051013",
  "310051020",
  "310051037",
  "310051052",
  "310051058",
  "310051062",
  "310051090",
  "310051099",
  "310051122",
  "310051148",
  "310051155",
  "310051213",
  "310051232",
  "310051286",
  "310051588",
  "310051589",
  "310051757",
  "310051774",
  "310051841",
  "310051897",
  "310051929",
  "310051960",
  "310051972",
  "310051977",
  "310051980",
  "310051983",
  "310052043",
  "310052095",
  "310052117",
  "310052139",
  "310052228",
  "310052245",
  "310052302",
  "310052364",
  "310052408",
  "310052409",
  "310052410",
  "310052444",
  "310052453",
  "310052472",
  "310052515",
  "310052624",
  "310052877",
  "310052940",
  "310053051",
  "310053079",
  "310053104",
  "310053556",
  "310053649",
  "310053650",
  "310053682",
  "310053684",
  "310053705",
  "310053970",
  "310053976",
  "310054012",
  "310054050",
  "310054053",
  "310054090",
  "310054159",
  "310054320",
  "310054343",
  "310054348",
  "310054373",
  "310054374",
  "310054394",
  "310054436",
  "310054490",
  "310054500",
  "310054506",
  "310054519",
  "310054538",
  "310054561",
  "310054645",
  "310054667",
  "310054677",
  "310054699",
  "310054707",
  "310054728",
  "310054739",
  "310054745",
  "310054751",
  "310054761",
  "310054802",
  "310054804",
  "310054863",
  "310054878",
  "310054880",
  "310054900",
  "310054948",
  "310055039",
  "310055054",
  "310055127",
  "310055191",
  "310055192",
  "310055200",
  "310055267",
  "310055271",
  "310055322",
  "310055447",
  "310055463",
  "310055676",
  "310055685",
  "310055910",
  "310055923",
  "310055990",
  "310056022",
  "310056028",
  "310056147",
  "310056156",
  "310056175",
  "310056401",
  "310056412",
  "310056460",
  "310056461",
  "310056462",
  "310056487",
  "310056488",
  "310056497",
  "310056513",
  "310056601",
  "310056636",
  "310056637",
  "310056654",
  "310056656",
  "310056658",
  "310056674",
  "310056682",
  "310056685",
  "310056706",
  "310056733",
  "310056742",
  "310056753",
  "310056879",
  "310056886",
  "310056966",
  "310057279",
  "310057288",
  "310057511",
  "310072861",
  "310082824",
  "310091518",
  "310092576",
  "646000003",
  "646000006",
  "646000010",
  "646000026",
  "646000042",
  "646000078",
  "646000093",
  "646000100",
  "646000119",
  "820046753",
  "820050254",
  "820050290",
  "820050431",
  "820050457",
  "820091262",
  "820091405",
  "820091835",
  "820092008",
];
// 31 duplicate stoves that is in genesis collection
export const legacyCookstoveDuplicates = [
  "202200009",
  "202200013",
  "202200096",
  "202200099",
  "202200309",
  "310000341",
  "310000624",
  "310000771",
  "310001819",
  "310025326",
  "310025404",
  "310028437",
  "310015802",
  "310015928",
  "310021223",
  "310021992",
  "310022697",
  "310022811",
  "310023212",
  "310023245",
  "202200002",
  "202200204",
  "202200264",
  "202200313",
  "202200387",
  "310001796",
  "310003033",
  "310014867",
  "310032668",
  "310033728",
  "310034422",
];
