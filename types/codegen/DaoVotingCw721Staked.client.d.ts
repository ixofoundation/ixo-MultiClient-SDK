/**
* This file was automatically generated by @cosmwasm/ts-codegen@0.20.0.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/
import { CosmWasmClient, SigningCosmWasmClient, ExecuteResult } from "@cosmjs/cosmwasm-stargate";
import { Coin, StdFee } from "@cosmjs/amino";
import { Duration, Binary, Addr, Config, HooksResponse, InfoResponse, NftClaimsResponse, ArrayOfString, TotalPowerAtHeightResponse, VotingPowerAtHeightResponse } from "./DaoVotingCw721Staked.types";
export interface DaoVotingCw721StakedReadOnlyInterface {
    contractAddress: string;
    config: () => Promise<Config>;
    nftClaims: ({ address }: {
        address: string;
    }) => Promise<NftClaimsResponse>;
    hooks: () => Promise<HooksResponse>;
    stakedNfts: ({ address, limit, startAfter }: {
        address: string;
        limit?: number;
        startAfter?: string;
    }) => Promise<ArrayOfString>;
    votingPowerAtHeight: ({ address, height }: {
        address: string;
        height?: number;
    }) => Promise<VotingPowerAtHeightResponse>;
    totalPowerAtHeight: ({ height }: {
        height?: number;
    }) => Promise<TotalPowerAtHeightResponse>;
    dao: () => Promise<Addr>;
    info: () => Promise<InfoResponse>;
}
export declare class DaoVotingCw721StakedQueryClient implements DaoVotingCw721StakedReadOnlyInterface {
    client: CosmWasmClient;
    contractAddress: string;
    constructor(client: CosmWasmClient, contractAddress: string);
    config: () => Promise<Config>;
    nftClaims: ({ address }: {
        address: string;
    }) => Promise<NftClaimsResponse>;
    hooks: () => Promise<HooksResponse>;
    stakedNfts: ({ address, limit, startAfter }: {
        address: string;
        limit?: number;
        startAfter?: string;
    }) => Promise<ArrayOfString>;
    votingPowerAtHeight: ({ address, height }: {
        address: string;
        height?: number;
    }) => Promise<VotingPowerAtHeightResponse>;
    totalPowerAtHeight: ({ height }: {
        height?: number;
    }) => Promise<TotalPowerAtHeightResponse>;
    dao: () => Promise<Addr>;
    info: () => Promise<InfoResponse>;
}
export interface DaoVotingCw721StakedInterface extends DaoVotingCw721StakedReadOnlyInterface {
    contractAddress: string;
    sender: string;
    receiveNft: ({ msg, sender, tokenId }: {
        msg: Binary;
        sender: string;
        tokenId: string;
    }, fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
    unstake: ({ tokenIds }: {
        tokenIds: string[];
    }, fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
    claimNfts: (fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
    updateConfig: ({ duration, owner }: {
        duration?: Duration;
        owner?: string;
    }, fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
    addHook: ({ addr }: {
        addr: string;
    }, fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
    removeHook: ({ addr }: {
        addr: string;
    }, fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
}
export declare class DaoVotingCw721StakedClient extends DaoVotingCw721StakedQueryClient implements DaoVotingCw721StakedInterface {
    client: SigningCosmWasmClient;
    sender: string;
    contractAddress: string;
    constructor(client: SigningCosmWasmClient, sender: string, contractAddress: string);
    receiveNft: ({ msg, sender, tokenId }: {
        msg: Binary;
        sender: string;
        tokenId: string;
    }, fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
    unstake: ({ tokenIds }: {
        tokenIds: string[];
    }, fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
    claimNfts: (fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
    updateConfig: ({ duration, owner }: {
        duration?: Duration;
        owner?: string;
    }, fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
    addHook: ({ addr }: {
        addr: string;
    }, fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
    removeHook: ({ addr }: {
        addr: string;
    }, fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
}
