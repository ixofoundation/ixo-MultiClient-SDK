/**
* This file was automatically generated by @cosmwasm/ts-codegen@0.26.0.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/
import { CosmWasmClient, SigningCosmWasmClient, ExecuteResult } from "@cosmjs/cosmwasm-stargate";
import { StdFee } from "@cosmjs/amino";
import { Duration, PercentageThreshold, Uint64, Choice, Coin, Config, Addr, InfoResponse, ProposalResponse } from "./DaoProposalCondorcet.types";
export interface DaoProposalCondorcetReadOnlyInterface {
    contractAddress: string;
    proposal: ({ id }: {
        id: number;
    }) => Promise<ProposalResponse>;
    config: () => Promise<Config>;
    dao: () => Promise<Addr>;
    info: () => Promise<InfoResponse>;
    nextProposalId: () => Promise<Uint64>;
}
export declare class DaoProposalCondorcetQueryClient implements DaoProposalCondorcetReadOnlyInterface {
    client: CosmWasmClient;
    contractAddress: string;
    constructor(client: CosmWasmClient, contractAddress: string);
    proposal: ({ id }: {
        id: number;
    }) => Promise<ProposalResponse>;
    config: () => Promise<Config>;
    dao: () => Promise<Addr>;
    info: () => Promise<InfoResponse>;
    nextProposalId: () => Promise<Uint64>;
}
export interface DaoProposalCondorcetInterface extends DaoProposalCondorcetReadOnlyInterface {
    contractAddress: string;
    sender: string;
    propose: ({ choices }: {
        choices: Choice[];
    }, fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
    vote: ({ proposalId, vote }: {
        proposalId: number;
        vote: number[];
    }, fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
    execute: ({ proposalId }: {
        proposalId: number;
    }, fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
    close: ({ proposalId }: {
        proposalId: number;
    }, fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
    setConfig: ({ closeProposalsOnExecutionFailure, minVotingPeriod, quorum, votingPeriod }: {
        closeProposalsOnExecutionFailure: boolean;
        minVotingPeriod?: Duration;
        quorum: PercentageThreshold;
        votingPeriod: Duration;
    }, fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
}
export declare class DaoProposalCondorcetClient extends DaoProposalCondorcetQueryClient implements DaoProposalCondorcetInterface {
    client: SigningCosmWasmClient;
    sender: string;
    contractAddress: string;
    constructor(client: SigningCosmWasmClient, sender: string, contractAddress: string);
    propose: ({ choices }: {
        choices: Choice[];
    }, fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
    vote: ({ proposalId, vote }: {
        proposalId: number;
        vote: number[];
    }, fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
    execute: ({ proposalId }: {
        proposalId: number;
    }, fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
    close: ({ proposalId }: {
        proposalId: number;
    }, fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
    setConfig: ({ closeProposalsOnExecutionFailure, minVotingPeriod, quorum, votingPeriod }: {
        closeProposalsOnExecutionFailure: boolean;
        minVotingPeriod?: Duration;
        quorum: PercentageThreshold;
        votingPeriod: Duration;
    }, fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
}
