/**
* This file was automatically generated by @cosmwasm/ts-codegen@0.20.0.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/
import { CosmWasmClient, SigningCosmWasmClient, ExecuteResult } from "@cosmjs/cosmwasm-stargate";
import { Coin, StdFee } from "@cosmjs/amino";
import { InstantiateMsg, Uint128, Binary, Uint64, ArrayOfVestingContract, OwnershipForAddr } from "./CwPayrollFactory.types";
export interface CwPayrollFactoryReadOnlyInterface {
    contractAddress: string;
    listVestingContracts: ({ limit, startAfter }: {
        limit?: number;
        startAfter?: string;
    }) => Promise<ArrayOfVestingContract>;
    listVestingContractsReverse: ({ limit, startBefore }: {
        limit?: number;
        startBefore?: string;
    }) => Promise<ArrayOfVestingContract>;
    listVestingContractsByInstantiator: ({ instantiator, limit, startAfter }: {
        instantiator: string;
        limit?: number;
        startAfter?: string;
    }) => Promise<ArrayOfVestingContract>;
    listVestingContractsByInstantiatorReverse: ({ instantiator, limit, startBefore }: {
        instantiator: string;
        limit?: number;
        startBefore?: string;
    }) => Promise<ArrayOfVestingContract>;
    listVestingContractsByRecipient: ({ limit, recipient, startAfter }: {
        limit?: number;
        recipient: string;
        startAfter?: string;
    }) => Promise<ArrayOfVestingContract>;
    listVestingContractsByRecipientReverse: ({ limit, recipient, startBefore }: {
        limit?: number;
        recipient: string;
        startBefore?: string;
    }) => Promise<ArrayOfVestingContract>;
    ownership: () => Promise<OwnershipForAddr>;
    codeId: () => Promise<Uint64>;
}
export declare class CwPayrollFactoryQueryClient implements CwPayrollFactoryReadOnlyInterface {
    client: CosmWasmClient;
    contractAddress: string;
    constructor(client: CosmWasmClient, contractAddress: string);
    listVestingContracts: ({ limit, startAfter }: {
        limit?: number;
        startAfter?: string;
    }) => Promise<ArrayOfVestingContract>;
    listVestingContractsReverse: ({ limit, startBefore }: {
        limit?: number;
        startBefore?: string;
    }) => Promise<ArrayOfVestingContract>;
    listVestingContractsByInstantiator: ({ instantiator, limit, startAfter }: {
        instantiator: string;
        limit?: number;
        startAfter?: string;
    }) => Promise<ArrayOfVestingContract>;
    listVestingContractsByInstantiatorReverse: ({ instantiator, limit, startBefore }: {
        instantiator: string;
        limit?: number;
        startBefore?: string;
    }) => Promise<ArrayOfVestingContract>;
    listVestingContractsByRecipient: ({ limit, recipient, startAfter }: {
        limit?: number;
        recipient: string;
        startAfter?: string;
    }) => Promise<ArrayOfVestingContract>;
    listVestingContractsByRecipientReverse: ({ limit, recipient, startBefore }: {
        limit?: number;
        recipient: string;
        startBefore?: string;
    }) => Promise<ArrayOfVestingContract>;
    ownership: () => Promise<OwnershipForAddr>;
    codeId: () => Promise<Uint64>;
}
export interface CwPayrollFactoryInterface extends CwPayrollFactoryReadOnlyInterface {
    contractAddress: string;
    sender: string;
    receive: ({ amount, msg, sender }: {
        amount: Uint128;
        msg: Binary;
        sender: string;
    }, fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
    instantiateNativePayrollContract: ({ instantiateMsg, label }: {
        instantiateMsg: InstantiateMsg;
        label: string;
    }, fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
    updateCodeId: ({ vestingCodeId }: {
        vestingCodeId: number;
    }, fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
    updateOwnership: (fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
}
export declare class CwPayrollFactoryClient extends CwPayrollFactoryQueryClient implements CwPayrollFactoryInterface {
    client: SigningCosmWasmClient;
    sender: string;
    contractAddress: string;
    constructor(client: SigningCosmWasmClient, sender: string, contractAddress: string);
    receive: ({ amount, msg, sender }: {
        amount: Uint128;
        msg: Binary;
        sender: string;
    }, fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
    instantiateNativePayrollContract: ({ instantiateMsg, label }: {
        instantiateMsg: InstantiateMsg;
        label: string;
    }, fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
    updateCodeId: ({ vestingCodeId }: {
        vestingCodeId: number;
    }, fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
    updateOwnership: (fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
}
